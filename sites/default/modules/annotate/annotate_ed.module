<?php 
// $Id: annotate_ed.module,v 1.3 2008/08/08 14:53:46 clemenstolboom Exp $
/** 
 * @file 
 * Let users attach an editorial note to a node
 */ 

define( ANNOTATE_ED_EDIT, 'edit editorial note');
define( ANNOTATE_ED_LOCK, 'lock editorial note');

/** 
 * Implementation of hook_menu(). 
 */ 
function annotate_ed_menu() { 
  $items = array(); 

  $items['admin/settings/annotate_ed'] = array( 
    'title' => 'Editorial annotation settings', 
    'description' => 'Change how editorial note behave.', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('annotate_ed_admin_settings'), 
    'access arguments' => array('administer site configuration') 
  );
   
  return $items; 
}

/**
 * Implementation of hook_perm()
 */
function annotate_ed_perm() {
  return array( ANNOTATE_ED_EDIT, ANNOTATE_ED_LOCK);
}

/** 
 * Define the settings form. 
 */ 
function annotate_ed_admin_settings() {
  $form['annotate_ed_show_expanded'] = array( 
    '#type' => 'radios', 
    '#title' => t('Show the annotation form expanded'), 
    '#options' => array( '1' => t('Yes'), '0' => t('No')), 
    '#default_value' => variable_get('annotate_ed_show_expanded', '0'), 
    '#description' => t('The annotation is not collapsed by default'), 
  );

  $form['annotate_ed_nodetypes'] = array( 
    '#type' => 'checkboxes', 
    '#title' => t('Users may attach an editorial note to these node types'), 
    '#options' => node_get_types('names'), 
    '#default_value' => variable_get('annotate_ed_nodetypes', array('story')), 
    '#description' => t('A text field will be available on these node types to make editorial notes.')
  );

  $form['array_filter'] = array(
    '#type' => 'hidden'
  );
 
  $formats = filter_formats();
  $options = array();
  foreach ($formats as $format) {
    $options[$format->format]= $format->name;
  }

  $form['annotate_ed_format'] = array( 
    '#type' => 'radios', 
    '#title' => t('Users may use these formats for editorial notes'), 
    '#options' => $options,
    '#default_value' => variable_get('annotate_ed_format', 1),
    '#description' => t('These filters are allowed to make an editorial note.') 
  );
  
  return system_settings_form($form); 
}

/** 
 * Implementation of hook_nodeapi(). 
 */ 
function annotate_ed_nodeapi(&$node, $op, $teaser, $page) { 
  switch ($op) { 
    case 'view': 
      global $user; 
      // If only the node summary is being displayed
      if ($teaser) {
        break; 
      } 

      // Check whether editorial notes are allowed for node
      $types_to_ed_note = variable_get('annotate_ed_nodetypes', array('story')); 
      if (!in_array($node->type, $types_to_ed_note)) { 
        break; 
      } 
      
      // Get previously saved note, if any. 
      $result = db_query("SELECT note, locked FROM {annotate_ed} WHERE nid = %d", $node->nid); 
      $fields = db_fetch_array($result);

      $node->annotate_ed_note = $fields['note'];
      $node->annotate_ed_locked= isset( $fields['locked']) ? $fields['locked'] : 0;

      if (( user_access( ANNOTATE_ED_EDIT, $user) && !$node->annotate_ed_locked)
            || user_access( ANNOTATE_ED_LOCK, $user)) {
        // Add our form as a content item.
        $node->content['annotate_ed_form'] = array( 
          '#value' => drupal_get_form('annotate_ed_entry_form', $node), 
          '#weight' => 10 
        ); 
      }
      else if (! empty( $node->annotate_ed_note) && $node->annotate_ed_locked) {
        $node->content['annotate_ed'] = array( 
          '#value' => theme('annotate_ed_note', $node), 
          '#weight' => -10, 
        );
      } 
      else {
        unset($node->annotate_ed_note);
        unset($node->annotate_ed_locked);
      }
      break;
              
    case 'delete':
      _annotate_ed_node_delete($node);
      break;
      
    default:
      break;
  }
} 

function annotate_ed_theme($existing, $type, $theme, $path) {
  return array(
    'annotate_ed_note' => array(
      'node' => NULL,
    ),
  );
}

function theme_annotate_ed_note( $node) {
  drupal_add_css( drupal_get_path('module', 'annotate_ed') .'/css/annotate_ed.css');
  return '<div class="annotate-editorial">'. check_markup($node->annotate_ed_note) .'</div>';
}

/** 
 * Define the form for entering an editorial note. 
 */ 
function annotate_ed_entry_form($form_state, $node) { 
  global $user;

  $form['annotate_ed'] = array( 
    '#type' => 'fieldset', 
    '#title' => t('Editorial note'),
    '#collapsible' => TRUE,
    '#collapsed' => !$node->annotate_ed_note && !variable_get('annotate_ed_show_expanded', '0'),
  );
   
  $form['annotate_ed']['nid'] = array( 
    '#type' => 'value', 
    '#value' => $node->nid,
  ); 

  $locked= $node->annotate_ed_locked;

  $form['annotate_ed']['note']['ed_note'] = array( 
    '#type' => 'textarea', 
    '#title' => t('Note'), 
    '#default_value' => $node->annotate_ed_note,
    '#disabled' => $locked,
    '#description' => t('Edit the editorial note about this content here.') 
  ); 

  $form['annotate_ed']['note']['filter']= filter_form(variable_get('annotate_ed_format', 1));

  if (user_access( ANNOTATE_ED_LOCK, $user)) {
    $options = array(
      0 => t('Unlocked'),
      1 => t('Locked')
    );

    $form['annotate_ed']['locked'] = array(
      '#title' => t('Lock note'),
      '#type' => 'radios',
      '#description' => t('Check this to lock the editorial note and show it to all users'),
      '#options' => $options,
      '#default_value' => $node->annotate_ed_locked
    );
  }
  $form['annotate_ed']['submit'] = array( 
    '#type' => 'submit', 
    '#value' => t('Update') 
  ); 
  return $form; 
}  

/* 
 * Save the editorial note to the database. 
 */ 
function annotate_ed_entry_form_submit($form, &$form_state) { 
  global $user; 

  $nid = $form_state['values']['nid']; 
  $note = $form_state['values']['ed_note']; 
  $locked = isset($form_state['values']['locked']) ? $form_state['values']['locked'] : 0; 

  db_query("DELETE FROM {annotate_ed} WHERE nid = %d", $nid); 

  db_query("INSERT INTO {annotate_ed} (nid, note, locked, timestamp)
    VALUES (%d, '%s', %d, %d)", $nid, $note, $locked, time()); 
  drupal_set_message(t('Your editorial note was saved. locked='. $locked )); 
}

function _annotate_ed_node_delete(&$node) {
  if (_annotate_ed_exists_by_node( $nid)) {
    db_query("DELETE FROM {annotate_ed} WHERE nid = %d", $node->nid);
    drupal_set_message(t('Editorial annotation deleted for node %nid.', array( '%nid' => $node->nid)));
  }
}

function _annotate_ed_exists_by_node( $nid) {
  $result= db_query( ( "SELECT COUNT(*) AS num FROM {annotate_ed} WHERE nid=%d"), $nid);
  $row = db_fetch_array( $result);
  return $row['num'] > 0;
}
